<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>IRingbuffer(T) Interface</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="IRingbuffer%3CT%3E interface" /><meta name="System.Keywords" content="Hazelcast.Core.IRingbuffer%3CT%3E interface" /><meta name="System.Keywords" content="IRingbuffer(Of T) interface" /><meta name="System.Keywords" content="Hazelcast.Core.IRingbuffer(Of T) interface" /><meta name="Microsoft.Help.F1" content="Hazelcast.Core.IRingbuffer`1" /><meta name="Microsoft.Help.Id" content="T:Hazelcast.Core.IRingbuffer`1" /><meta name="Description" content="A Ringbuffer is a data-structure where the content is stored in a ring like structure." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Hazelcast.Core" /><meta name="file" content="T_Hazelcast_Core_IRingbuffer_1" /><meta name="guid" content="T_Hazelcast_Core_IRingbuffer_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Hazelcast .Net Client Class Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\G_Hazelcast_Client.htm" title="Hazelcast .Net Client Class Library" tocid="roottoc">Hazelcast .Net Client Class Library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Hazelcast_Core.htm" title="Hazelcast.Core" tocid="N_Hazelcast_Core">Hazelcast.Core</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Hazelcast_Core_IRingbuffer_1.htm" title="IRingbuffer(T) Interface" tocid="T_Hazelcast_Core_IRingbuffer_1">IRingbuffer(T) Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Hazelcast_Core_IRingbuffer_1.htm" title="IRingbuffer(T) Methods" tocid="Methods_T_Hazelcast_Core_IRingbuffer_1">IRingbuffer(T) Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Hazelcast-IMDG-Logo-Orange_Dark_200px.jpg" /></td><td class="titleColumn"><h1>IRingbuffer<span id="LST283C20FC_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LST283C20FC_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Interface</h1></td></tr></table><span class="introStyle"></span> <div class="summary">A Ringbuffer is a data-structure where the content is stored in a ring like structure.</div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Hazelcast_Core.htm">Hazelcast.Core</a><br />
    <strong>Assembly:</strong>
   Hazelcast.Net (in Hazelcast.Net.dll) Version: 3.12.3<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IRingbuffer</span>&lt;T&gt; : <span class="identifier">IDistributedObject</span>
</pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IRingbuffer</span>(<span class="keyword">Of</span> T)
	<span class="keyword">Inherits</span> <span class="identifier">IDistributedObject</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IRingbuffer</span> : <span class="identifier">IDistributedObject</span></pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">IRingbuffer</span>&lt;'T&gt; =  
    <span class="keyword">interface</span>
        <span class="keyword">interface</span> <span class="identifier">IDistributedObject</span>
    <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd /></dl></div><p>The <span class="selflink">IRingbuffer<span id="LST283C20FC_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST283C20FC_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_Add.htm">Add</a></td><td><div class="summary">Adds an item to the tail of the Ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_AddAllAsync__1.htm">AddAllAsync<span id="LST283C20FC_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_4?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>TE<span id="LST283C20FC_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_5?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">Adds all the items of a collection to the tail of the Ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_AddAsync.htm">AddAsync</a></td><td><div class="summary">
            Asynchronously writes an item with a configurable
            <a href="T_Hazelcast_Core_OverflowPolicy.htm">OverflowPolicy</a>
            .
            If there is space in the ringbuffer, the call will return the sequence of the written item.
            If there is no space, it depends on the overflow policy what happens:
            <ol><li><a href="T_Hazelcast_Core_OverflowPolicy.htm">Overwrite</a>
            : we just overwrite the oldest item in the ringbuffer and we violate
            the ttl</li><li><a href="T_Hazelcast_Core_OverflowPolicy.htm">Fail</a>
            : we return -1 </li></ol>
            The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required,
            this can be implemented using retrying in combination with a exponential backoff. Example:
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAHCDA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAHCDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAHCDA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">int</span> sleepMs = <span class="highlight-number">100</span>;
<span class="highlight-keyword">for</span> (; ; ) {
<span class="highlight-keyword">long</span> result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result;
<span class="highlight-keyword">if</span> (result != <span class="highlight-number">-1</span>) {
<span class="highlight-keyword">break</span>;
}
Thread.Sleep(sleepMs);
sleepMs = Math.Min(<span class="highlight-number">5000</span>, sleepMs * <span class="highlight-number">2</span>);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAHCDA");</script></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_Capacity.htm">Capacity</a></td><td><div class="summary">Returns the capacity of this Ringbuffer.</div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IDistributedObject_Destroy.htm">Destroy</a></td><td><div class="summary">Destroys this object cluster-wide.</div> (Inherited from <a href="T_Hazelcast_Core_IDistributedObject.htm">IDistributedObject</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IDistributedObject_GetName.htm">GetName</a></td><td><div class="summary">Returns the unique name for this IDistributedObject.</div> (Inherited from <a href="T_Hazelcast_Core_IDistributedObject.htm">IDistributedObject</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IDistributedObject_GetPartitionKey.htm">GetPartitionKey</a></td><td><div class="summary">Returns the key of partition this IDistributedObject is assigned to.</div> (Inherited from <a href="T_Hazelcast_Core_IDistributedObject.htm">IDistributedObject</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IDistributedObject_GetServiceName.htm">GetServiceName</a></td><td><div class="summary">Returns the service name for this object.</div> (Inherited from <a href="T_Hazelcast_Core_IDistributedObject.htm">IDistributedObject</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_HeadSequence.htm">HeadSequence</a></td><td><div class="summary">Returns the sequence of the head.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_ReadManyAsync.htm">ReadManyAsync</a></td><td><div class="summary">Reads a batch of items from the Ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_ReadOne.htm">ReadOne</a></td><td><div class="summary">Reads one item from the Ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_RemainingCapacity.htm">RemainingCapacity</a></td><td><div class="summary">Returns the remaining capacity of the ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_Size.htm">Size</a></td><td><div class="summary">Returns number of items in the ringbuffer.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Hazelcast_Core_IRingbuffer_1_TailSequence.htm">TailSequence</a></td><td><div class="summary">Returns the sequence of the tail.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID3RBSection" class="collapsibleSection">
            A Ringbuffer is a data-structure where the content is stored in a ring like structure. A ringbuffer has a capacity so it
            won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest
            item in the ringbuffer is overwritten.
            The ringbuffer has 2 always incrementing sequences:
            <ol><li>
            tailSequence: this is the side where the youngest item is found. So the tail is the side of the ringbuffer where
            items are added to.
            </li><li>
            headSequence: this is the side where the oldest items are found. So the head is the side where items gets
            discarded.
            </li></ol>
            The items in the ringbuffer can be found by a sequence that is in between (inclusive) the head and tail sequence.
            If data is read from a ringbuffer with a sequence that is smaller than the headSequence, it means that the data
            is not available anymore and a
            <a href="T_Hazelcast_Core_StaleSequenceException.htm">StaleSequenceException</a>
            is thrown.
            A Ringbuffer currently is not a distributed data-structure. So all data is stored in a single partition; comparable to the
            IQueue implementation. But we'll provide an option to partition the data in the near future.
            A Ringbuffer can be used in a similar way as a queue, but one of the key differences is that a queue.take is destructive,
            meaning that only 1 thread is able to take an item. A ringbuffer.read is not destructive, so you can have multiple threads
            reading the same item multiple times.
            The Ringbuffer is the backing data-structure for the reliable
            <a href="T_Hazelcast_Core_ITopic_1.htm">ITopic<span id="LST283C20FC_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST283C20FC_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST283C20FC_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
            implementation.     
            </div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Hazelcast_Core.htm">Hazelcast.Core Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.</p> </div></body></html>